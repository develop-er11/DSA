Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.


Algorithm

Define a function called transform that takes a string as an input and returns a new string with modifications as explained in the intuition section.
We maintain a dictionary to store the character to index mapping for the given string.
For each character, we look up the mapping in the dictionary. If there is a mapping, that means this character already has its first occurrence recorded and we simply use the first occurrence's index in the new string. Otherwise, we use the current index for the first occurrence.
We find the transformed strings for both of our input strings. Let's say the transformed strings are s1 and s2 respectively.
If s1 == s2, that implies the two input strings are isomorphic. Otherwise, they're not.


Complexity Analysis

Here NN is the length of each string (if the strings are not the same length, they cannot be isomorphic).

Time Complexity: O(N)O(N). We process each character in both the strings exactly once to determine if they are isomorphic.
Space Complexity: O(N)O(N). We form two new strings returned by our transformation function. The size of ASCII character set is fixed and the keys in our dictionary are valid ASCII characters only. So the size of the map in the transform function doesn't contribute to the space complexity.
